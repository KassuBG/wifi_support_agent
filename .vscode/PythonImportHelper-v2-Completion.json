[
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "InternetSupportAgent",
        "importPath": "agents.support_agent",
        "description": "agents.support_agent",
        "isExtraImport": true,
        "detail": "agents.support_agent",
        "documentation": {}
    },
    {
        "label": "InternetSupportAgent",
        "importPath": "agents.support_agent",
        "description": "agents.support_agent",
        "isExtraImport": true,
        "detail": "agents.support_agent",
        "documentation": {}
    },
    {
        "label": "InternetSupportAgent",
        "importPath": "agents.support_agent",
        "description": "agents.support_agent",
        "isExtraImport": true,
        "detail": "agents.support_agent",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "api.app",
        "description": "api.app",
        "isExtraImport": true,
        "detail": "api.app",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "InternetSupportAgent",
        "kind": 6,
        "importPath": "agents.support_agent",
        "description": "agents.support_agent",
        "peekOfCode": "class InternetSupportAgent:\n    def __init__(self):\n        self.issues = {\n            \"no_internet\": [\"no internet connection\", \"internet is not working\", \"no internet\"],\n            \"slow_speed\": [\"slow internet speeds\", \"internet is slow\", \"slow connection\"],\n            \"wifi_issue\": [\"wi-fi connectivity problems\", \"wi-fi is not working\", \"can't connect to wi-fi\", \"wi-fi is not connecting\"],\n            \"router_issue\": [\"router or modem issues\", \"router is not working\", \"modem is not working\"]\n        }\n        self.knowledge_base = {\n            \"no_internet\": [",
        "detail": "agents.support_agent",
        "documentation": {}
    },
    {
        "label": "UserInput",
        "kind": 6,
        "importPath": "api.app",
        "description": "api.app",
        "peekOfCode": "class UserInput(BaseModel):\n    message: str\n@app.post(\"/support\")\nasync def support(user_input: UserInput):\n    if not user_input.message:\n        raise HTTPException(status_code=400, detail=\"Message is required\")\n    response = agent.handle_request(user_input.message)\n    return {\"response\": response}\nif __name__ == \"__main__\":\n    import uvicorn",
        "detail": "api.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "api.app",
        "description": "api.app",
        "peekOfCode": "app = FastAPI()\nagent = InternetSupportAgent()\nclass UserInput(BaseModel):\n    message: str\n@app.post(\"/support\")\nasync def support(user_input: UserInput):\n    if not user_input.message:\n        raise HTTPException(status_code=400, detail=\"Message is required\")\n    response = agent.handle_request(user_input.message)\n    return {\"response\": response}",
        "detail": "api.app",
        "documentation": {}
    },
    {
        "label": "agent",
        "kind": 5,
        "importPath": "api.app",
        "description": "api.app",
        "peekOfCode": "agent = InternetSupportAgent()\nclass UserInput(BaseModel):\n    message: str\n@app.post(\"/support\")\nasync def support(user_input: UserInput):\n    if not user_input.message:\n        raise HTTPException(status_code=400, detail=\"Message is required\")\n    response = agent.handle_request(user_input.message)\n    return {\"response\": response}\nif __name__ == \"__main__\":",
        "detail": "api.app",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "class Config:\n    DEBUG = os.getenv(\"DEBUG\", \"False\") == \"True\"\n    PORT = int(os.getenv(\"PORT\", 8000))",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "test_support_endpoint",
        "kind": 2,
        "importPath": "tests.test_api",
        "description": "tests.test_api",
        "peekOfCode": "def test_support_endpoint():\n    # Test a valid request\n    response = client.post(\"/support\", json={\"message\": \"My internet is not working\"})\n    assert response.status_code == 200\n    assert \"response\" in response.json()\n    print(response.json())\n    # Test a follow-up request\n    response = client.post(\"/support\", json={\"message\": \"no\"})\n    assert response.status_code == 200\n    assert \"response\" in response.json()",
        "detail": "tests.test_api",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "tests.test_api",
        "description": "tests.test_api",
        "peekOfCode": "client = TestClient(app)\ndef test_support_endpoint():\n    # Test a valid request\n    response = client.post(\"/support\", json={\"message\": \"My internet is not working\"})\n    assert response.status_code == 200\n    assert \"response\" in response.json()\n    print(response.json())\n    # Test a follow-up request\n    response = client.post(\"/support\", json={\"message\": \"no\"})\n    assert response.status_code == 200",
        "detail": "tests.test_api",
        "documentation": {}
    },
    {
        "label": "agent",
        "kind": 2,
        "importPath": "tests.test_support_agent",
        "description": "tests.test_support_agent",
        "peekOfCode": "def agent():\n    return InternetSupportAgent()\ndef test_identify_issue(agent):\n    assert agent.identify_issue(\"My internet is not working\") == \"no_internet\"\n    assert agent.identify_issue(\"Wi-Fi is not connecting\") == \"wifi_issue\"\n    assert agent.identify_issue(\"Random input\") is None\ndef test_provide_solution(agent):\n    assert agent.provide_solution(\"no_internet\") == \"1. Check if your router is powered on.\\n2. Restart your router and modem.\\n3. Ensure all cables are securely connected.\"\n    assert agent.provide_solution(\"unknown_issue\") == \"I'm sorry, I couldn't identify the issue. Please try again.\"\ndef test_handle_request(agent):",
        "detail": "tests.test_support_agent",
        "documentation": {}
    },
    {
        "label": "test_identify_issue",
        "kind": 2,
        "importPath": "tests.test_support_agent",
        "description": "tests.test_support_agent",
        "peekOfCode": "def test_identify_issue(agent):\n    assert agent.identify_issue(\"My internet is not working\") == \"no_internet\"\n    assert agent.identify_issue(\"Wi-Fi is not connecting\") == \"wifi_issue\"\n    assert agent.identify_issue(\"Random input\") is None\ndef test_provide_solution(agent):\n    assert agent.provide_solution(\"no_internet\") == \"1. Check if your router is powered on.\\n2. Restart your router and modem.\\n3. Ensure all cables are securely connected.\"\n    assert agent.provide_solution(\"unknown_issue\") == \"I'm sorry, I couldn't identify the issue. Please try again.\"\ndef test_handle_request(agent):\n    response = agent.handle_request(\"My internet is not working\")\n    assert \"Did this resolve your issue?\" in response[\"response\"]",
        "detail": "tests.test_support_agent",
        "documentation": {}
    },
    {
        "label": "test_provide_solution",
        "kind": 2,
        "importPath": "tests.test_support_agent",
        "description": "tests.test_support_agent",
        "peekOfCode": "def test_provide_solution(agent):\n    assert agent.provide_solution(\"no_internet\") == \"1. Check if your router is powered on.\\n2. Restart your router and modem.\\n3. Ensure all cables are securely connected.\"\n    assert agent.provide_solution(\"unknown_issue\") == \"I'm sorry, I couldn't identify the issue. Please try again.\"\ndef test_handle_request(agent):\n    response = agent.handle_request(\"My internet is not working\")\n    assert \"Did this resolve your issue?\" in response[\"response\"]\n    response = agent.handle_request(\"yes\")\n    assert \"Great! Let me know if you need help with anything else.\" in response[\"response\"]\n    response = agent.handle_request(\"no\")\n    assert \"Letâ€™s try something else:\" in response[\"response\"]",
        "detail": "tests.test_support_agent",
        "documentation": {}
    },
    {
        "label": "test_handle_request",
        "kind": 2,
        "importPath": "tests.test_support_agent",
        "description": "tests.test_support_agent",
        "peekOfCode": "def test_handle_request(agent):\n    response = agent.handle_request(\"My internet is not working\")\n    assert \"Did this resolve your issue?\" in response[\"response\"]\n    response = agent.handle_request(\"yes\")\n    assert \"Great! Let me know if you need help with anything else.\" in response[\"response\"]\n    response = agent.handle_request(\"no\")\n    assert \"Letâ€™s try something else:\" in response[\"response\"]",
        "detail": "tests.test_support_agent",
        "documentation": {}
    },
    {
        "label": "get_random_response",
        "kind": 2,
        "importPath": "utils.helpers",
        "description": "utils.helpers",
        "peekOfCode": "def get_random_response(category):\n    \"\"\"Get a random response from a predefined category.\"\"\"\n    responses = {\n        \"greeting\": [\n            \"Hey there! Iâ€™m your Internet Troubleshooting Buddy. Letâ€™s get you back online!\",\n            \"Hi! Iâ€™m here to save the day (and your internet). Whatâ€™s the issue?\",\n            \"Hello! Letâ€™s fix your internet woes together. Whatâ€™s going on?\"\n        ],\n        \"positive_feedback\": [\n            \"Woohoo! Youâ€™re back online! ðŸŽ‰\",",
        "detail": "utils.helpers",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main():\n    print(\"Debug: Starting the agent...\")  \n    agent = InternetSupportAgent()\n    print(\"Debug: Agent initialized.\")  \n    print(\"Welcome to Internet Troubleshooting Support! How can I help you today?\")\n    while True:\n        user_input = input(\"> \")\n        if user_input.lower() in [\"exit\", \"quit\"]:\n            print(\"Thank you for using our support. Goodbye!\")\n            break",
        "detail": "main",
        "documentation": {}
    }
]